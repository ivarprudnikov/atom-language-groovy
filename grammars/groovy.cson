'scopeName': 'source.groovy'
'name': 'Groovy'
'fileTypes': [
  'groovy'
  'gvy'
  'bsh'
]
'patterns': [
  {
    'captures':
      '1':
        'name': 'keyword.other.package.groovy'
      '2':
        'name': 'storage.modifier.package.groovy'
      '3':
        'name': 'punctuation.terminator.groovy'
    'match': '^\\s*(package)\\b(?:\\s*([^ ;$]+)\\s*(;)?)?'
    'name': 'meta.package.groovy'
  }
  {
    'begin': '(import static)\\b\\s*'
    'beginCaptures':
      '1':
        'name': 'keyword.other.import.static.groovy'
    'captures':
      '1':
        'name': 'keyword.other.import.groovy'
      '2':
        'name': 'storage.modifier.import.groovy'
      '3':
        'name': 'punctuation.terminator.groovy'
    'contentName': 'storage.modifier.import.groovy'
    'end': '\\s*(?:$|(;))'
    'endCaptures':
      '1':
        'name': 'punctuation.terminator.groovy'
    'name': 'meta.import.groovy'
    'patterns': [
      {
        'match': '\\.'
        'name': 'punctuation.separator.groovy'
      }
      {
        'match': '\\s'
        'name': 'invalid.illegal.character_not_allowed_here.groovy'
      }
    ]
  }
  {
    'begin': '(import)\\b\\s*'
    'beginCaptures':
      '1':
        'name': 'keyword.other.import.groovy'
    'captures':
      '1':
        'name': 'keyword.other.import.groovy'
      '2':
        'name': 'storage.modifier.import.groovy'
      '3':
        'name': 'punctuation.terminator.groovy'
    'contentName': 'storage.modifier.import.groovy'
    'end': '\\s*(?:$|(;))'
    'endCaptures':
      '1':
        'name': 'punctuation.terminator.groovy'
    'name': 'meta.import.groovy'
    'patterns': [
      {
        'match': '\\.'
        'name': 'punctuation.separator.groovy'
      }
      {
        'match': '\\s'
        'name': 'invalid.illegal.character_not_allowed_here.groovy'
      }
    ]
  }
  {
    'include': '#code'
  }
]
'repository':
  'all-types':
    'patterns': [
      {
        'include': '#primitive-arrays'
      }
      {
        'include': '#primitive-types'
      }
      {
        'include': '#object-types'
      }
    ]
  'annotations':
    'patterns': [
      {
        'begin': '(@[^ (]+)(\\()'
        'beginCaptures':
          '1':
            'name': 'storage.type.annotation.groovy'
          '2':
            'name': 'punctuation.definition.annotation-arguments.begin.groovy'
        'end': '(\\))'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.annotation-arguments.end.groovy'
        'name': 'meta.declaration.annotation.groovy'
        'patterns': [
          {
            'captures':
              '1':
                'name': 'constant.other.key.groovy'
              '2':
                'name': 'keyword.operator.assignment.groovy'
            'match': '(\\w*)\\s*(=)'
          }
          {
            'include': '#code'
          }
          {
            'match': ','
            'name': 'punctuation.seperator.property.groovy'
          }
        ]
      }
      {
        'match': '@\\w*'
        'name': 'storage.type.annotation.groovy'
      }
    ]
  'anonymous-classes-and-new':
    'begin': '\\bnew\\b'
    'beginCaptures':
      '0':
        'name': 'keyword.control.new.groovy'
    'end': '(?<=\\)|\\])(?!\\s*{)|(?<=})|(?=;)'
    'patterns': [
      {
        'begin': '(\\w+)\\s*(?=\\[)'
        'beginCaptures':
          '1':
            'name': 'storage.type.groovy'
        'end': '(})|(?=\\s*(?:,|;|\\)))'
        'endCaptures':
          '1':
            'name': 'punctuation.section.block.end.groovy'
        'patterns': [
          {
            'begin': '\\['
            'end': '\\]'
            'patterns': [
              {
                'include': '#code'
              }
            ]
          }
          {
            'begin': '{'
            'beginCaptures':
              '0':
                'name': 'punctuation.section.block.begin.groovy'
            'end': '(?=})'
            'patterns': [
              {
                'include': '#code'
              }
            ]
          }
        ]
      }
      {
        'begin': '(?=\\w.*\\()'
        'end': '(?<=\\))'
        'patterns': [
          {
            'include': '#object-types'
          }
          {
            'begin': '\\('
            'beginCaptures':
              '1':
                'name': 'storage.type.groovy'
            'end': '\\)'
            'patterns': [
              {
                'include': '#code'
              }
            ]
          }
        ]
      }
      {
        'begin': '{'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.inner-class.begin.groovy'
        'end': '}'
        'endCaptures':
          '0':
            'name': 'punctuation.section.inner-class.end.groovy'
        'name': 'meta.inner-class.groovy'
        'patterns': [
          {
            'include': '#class-body'
          }
        ]
      }
    ]
  'assertions':
    'patterns': [
      {
        'begin': '\\b(assert)\\s'
        'beginCaptures':
          '1':
            'name': 'keyword.control.assert.groovy'
        'end': '$'
        'name': 'meta.declaration.assertion.groovy'
        'patterns': [
          {
            'match': ':'
            'name': 'keyword.operator.assert.expression-seperator.groovy'
          }
          {
            'include': '#code'
          }
        ]
      }
    ]
  'class':
    'begin': '(?=\\w?[\\w\\s]*(?:class|(?:@)?interface|enum)\\s+\\w+)'
    'end': '}'
    'endCaptures':
      '0':
        'name': 'punctuation.section.class.end.groovy'
    'name': 'meta.class.groovy'
    'patterns': [
      {
        'include': '#storage-modifiers'
      }
      {
        'include': '#comments'
      }
      {
        'captures':
          '1':
            'name': 'storage.modifier.groovy'
          '2':
            'name': 'entity.name.type.class.groovy'
        'match': '(class|(?:@)?interface|enum)\\s+(\\w+)'
        'name': 'meta.class.identifier.groovy'
      }
      {
        'begin': 'extends'
        'beginCaptures':
          '0':
            'name': 'storage.modifier.extends.groovy'
        'end': '(?={|implements)'
        'name': 'meta.definition.class.inherited.classes.groovy'
        'patterns': [
          {
            'include': '#object-types-inherited'
          }
          {
            'include': '#comments'
          }
        ]
      }
      {
        'begin': '(implements)\\s'
        'beginCaptures':
          '1':
            'name': 'storage.modifier.implements.groovy'
        'end': '(?=\\s*extends|\\{)'
        'name': 'meta.definition.class.implemented.interfaces.groovy'
        'patterns': [
          {
            'include': '#object-types-inherited'
          }
          {
            'include': '#comments'
          }
        ]
      }
      {
        'begin': '{'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.class.begin.groovy'
        'end': '(?=})'
        'name': 'meta.class.body.groovy'
        'patterns': [
          {
            'include': '#class-body'
          }
        ]
      }
    ]
  'class-body':
    'patterns': [
      {
        'include': '#comments'
      }
      {
        'include': '#class'
      }
      {
        'include': '#enums'
      }
      {
        'include': '#variables'
      }
      {
        'include': '#methods'
      }
      {
        'include': '#annotations'
      }
      {
        'include': '#storage-modifiers'
      }
      {
        'include': '#code'
      }
    ]
  'code':
    'patterns': [
      {
        'include': '#annotations'
      }
      {
        'include': '#comments'
      }
      {
        'include': '#class'
      }
      {
        'begin': '{'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.block.begin.groovy'
        'end': '}'
        'endCaptures':
          '0':
            'name': 'punctuation.section.block.end.groovy'
        'patterns': [
          {
            'include': '#code'
          }
        ]
      }
      {
        'include': '#assertions'
      }
      {
        'include': '#parens'
      }
      {
        'include': '#constants-and-special-vars'
      }
      {
        'include': '#anonymous-classes-and-new'
      }
      {
        'include': '#keywords'
      }
      {
        'include': '#storage-modifiers'
      }
      {
        'include': '#method-call'
      }
      {
        'include': '#strings'
      }
      {
        'include': '#all-types'
      }
    ]
  'comments':
    'patterns': [
      {
        'captures':
          '0':
            'name': 'punctuation.definition.comment.groovy'
        'match': '/\\*\\*/'
        'name': 'comment.block.empty.groovy'
      }
      {
        'include': 'text.html.groovydoc'
      }
      {
        'include': '#comments-inline'
      }
    ]
  'comments-inline':
    'patterns': [
      {
        'begin': '/\\*'
        'captures':
          '0':
            'name': 'punctuation.definition.comment.groovy'
        'end': '\\*/'
        'name': 'comment.block.groovy'
      }
      {
        'begin': '(^[ \\t]+)?(?=//)'
        'beginCaptures':
          '1':
            'name': 'punctuation.whitespace.comment.leading.groovy'
        'end': '(?!\\G)'
        'patterns': [
          {
            'begin': '//'
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.comment.groovy'
            'end': '\\n'
            'name': 'comment.line.double-slash.groovy'
          }
        ]
      }
    ]
  'constants-and-special-vars':
    'patterns': [
      {
        'match': '\\b(true|false|null)\\b'
        'name': 'constant.language.groovy'
      }
      {
        'match': '\\b(this|super)\\b'
        'name': 'variable.language.groovy'
      }
      {
        'match': '\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)([LlFfUuDd]|UL|ul)?\\b'
        'name': 'constant.numeric.groovy'
      }
      {
        'captures':
          '1':
            'name': 'keyword.operator.dereference.groovy'
        'match': '(\\.)?\\b([A-Z][A-Z0-9_]+)(?!<|\\.class|\\s*\\w+\\s*=)\\b'
        'name': 'constant.other.groovy'
      }
    ]
  'enums':
    'begin': '^(?=\\s*[A-Z0-9_]+\\s*({|\\(|,))'
    'end': '(?=;|})'
    'patterns': [
      {
        'begin': '\\w+'
        'beginCaptures':
          '0':
            'name': 'constant.other.enum.groovy'
        'end': '(?=,|;|})'
        'name': 'meta.enum.groovy'
        'patterns': [
          {
            'include': '#parens'
          }
          {
            'begin': '{'
            'beginCaptures':
              '0':
                'name': 'punctuation.section.enum.begin.groovy'
            'end': '}'
            'endCaptures':
              '0':
                'name': 'punctuation.section.enum.end.groovy'
            'patterns': [
              {
                'include': '#class-body'
              }
            ]
          }
        ]
      }
    ]
  'keywords':
    'patterns': [
      {
        'match': '\\b(try|catch|finally|throw)\\b'
        'name': 'keyword.control.catch-exception.groovy'
      }
      {
        'match': '\\?|:'
        'name': 'keyword.control.ternary.groovy'
      }
      {
        'match': '\\b(return|break|case|continue|default|do|while|for|switch|if|else)\\b'
        'name': 'keyword.control.groovy'
      }
      {
        'match': '\\b(instanceof)\\b'
        'name': 'keyword.operator.groovy'
      }
      {
        'match': '(<<|>>>?|~|\\^)'
        'name': 'keyword.operator.bitwise.groovy'
      }
      {
        'match': '((&|\\^|\\||<<|>>>?)=)'
        'name': 'keyword.operator.assignment.bitwise.groovy'
      }
      {
        'match': '(===?|!=|<=|>=|<>|<|>)'
        'name': 'keyword.operator.comparison.groovy'
      }
      {
        'match': '([+*/%-]=)'
        'name': 'keyword.operator.assignment.arithmetic.groovy'
      }
      {
        'match': '(=)'
        'name': 'keyword.operator.assignment.groovy'
      }
      {
        'match': '(\\-\\-|\\+\\+)'
        'name': 'keyword.operator.increment-decrement.groovy'
      }
      {
        'match': '(\\-|\\+|\\*|\\/|%)'
        'name': 'keyword.operator.arithmetic.groovy'
      }
      {
        'match': '(!|&&|\\|\\|)'
        'name': 'keyword.operator.logical.groovy'
      }
      {
        'match': '(\\||&)'
        'name': 'keyword.operator.bitwise.groovy'
      }
      {
        'match': '(?<=\\S)\\.(?=\\S)'
        'name': 'keyword.operator.dereference.groovy'
      }
      {
        'match': ';'
        'name': 'punctuation.terminator.groovy'
      }
    ]
  'method-call':
    'begin': '([\\w$]+)(\\()'
    'beginCaptures':
      '1':
        'name': 'meta.method.groovy'
      '2':
        'name': 'punctuation.definition.method-parameters.begin.groovy'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.method-parameters.end.groovy'
    'name': 'meta.method-call.groovy'
    'patterns': [
      {
        'match': ','
        'name': 'punctuation.definition.seperator.parameter.groovy'
      }
      {
        'include': '#code'
      }
    ]
  'methods':
    'begin': '(?!new)(?=[\\w<].*\\s+)(?=([^=/]|/(?!/))+\\()'
    'end': '(})|(?=;)'
    'endCaptures':
      '1':
        'name': 'punctuation.section.method.end.groovy'
    'name': 'meta.method.groovy'
    'patterns': [
      {
        'include': '#storage-modifiers'
      }
      {
        'begin': '(\\w+)\\s*\\('
        'beginCaptures':
          '1':
            'name': 'entity.name.function.groovy'
        'end': '\\)'
        'name': 'meta.method.identifier.groovy'
        'patterns': [
          {
            'include': '#parameters'
          }
        ]
      }
      {
        'begin': '<'
        'end': '>'
        'name': 'storage.type.token.groovy'
        'patterns': [
          {
            'include': '#object-types'
          }
          {
            'begin': '<'
            'comment': 'This is just to support <>\'s with no actual type prefix'
            'end': '>|[^\\w\\s,\\[\\]<]'
            'name': 'storage.type.generic.groovy'
          }
        ]
      }
      {
        'begin': '(?=\\w.*\\s+\\w+\\s*\\()'
        'end': '(?=\\w+\\s*\\()'
        'name': 'meta.method.return-type.groovy'
        'patterns': [
          {
            'include': '#all-types'
          }
        ]
      }
      {
        'include': '#throws'
      }
      {
        'begin': '{'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.method.begin.groovy'
        'end': '(?=})'
        'name': 'meta.method.body.groovy'
        'patterns': [
          {
            'include': '#code'
          }
        ]
      }
      {
        'include': '#comments'
      }
    ]
  'object-types':
    'patterns': [
      {
        'begin': '\\b((?:[a-z]\\w*\\.)*[A-Z]+\\w*)<'
        'end': '>|[^\\w\\s,\\?<\\[\\]]'
        'name': 'storage.type.generic.groovy'
        'patterns': [
          {
            'include': '#object-types'
          }
          {
            'begin': '<'
            'comment': 'This is just to support <>\'s with no actual type prefix'
            'end': '>|[^\\w\\s,\\[\\]<]'
            'name': 'storage.type.generic.groovy'
          }
        ]
      }
      {
        'begin': '\\b((?:[a-z]\\w*\\.)*[A-Z]+\\w*)(?=\\[)'
        'end': '(?=[^\\]\\s])'
        'name': 'storage.type.object.array.groovy'
        'patterns': [
          {
            'begin': '\\['
            'end': '\\]'
            'patterns': [
              {
                'include': '#code'
              }
            ]
          }
        ]
      }
      {
        'captures':
          '1':
            'name': 'keyword.operator.dereference.groovy'
        'match': '\\b(?:[a-z]\\w*(\\.))*[A-Z]+\\w*\\b'
        'name': 'storage.type.groovy'
      }
    ]
  'object-types-inherited':
    'patterns': [
      {
        'begin': '\\b((?:[a-z]\\w*\\.)*[A-Z]+\\w*)<'
        'end': '>|[^\\w\\s,<]'
        'name': 'entity.other.inherited-class.groovy'
        'patterns': [
          {
            'include': '#object-types'
          }
          {
            'begin': '<'
            'comment': 'This is just to support <>\'s with no actual type prefix'
            'end': '>|[^\\w\\s,<]'
            'name': 'storage.type.generic.groovy'
          }
        ]
      }
      {
        'captures':
          '1':
            'name': 'keyword.operator.dereference.groovy'
        'match': '\\b(?:[a-z]\\w*(\\.))*[A-Z]+\\w*'
        'name': 'entity.other.inherited-class.groovy'
      }
    ]
  'parameters':
    'patterns': [
      {
        'match': 'final'
        'name': 'storage.modifier.groovy'
      }
      {
        'include': '#annotations'
      }
      {
        'include': '#primitive-arrays'
      }
      {
        'include': '#primitive-types'
      }
      {
        'include': '#object-types'
      }
      {
        'match': '\\w+'
        'name': 'variable.parameter.groovy'
      }
    ]
  'parens':
    'begin': '\\('
    'end': '\\)'
    'patterns': [
      {
        'include': '#code'
      }
    ]
  'primitive-arrays':
    'patterns': [
      {
        'match': '\\b(?:void|boolean|byte|char|short|int|float|long|double)(\\[\\])*\\b'
        'name': 'storage.type.primitive.array.groovy'
      }
    ]
  'primitive-types':
    'patterns': [
      {
        'match': '\\b(?:void|boolean|byte|char|short|int|float|long|double)\\b'
        'name': 'storage.type.primitive.groovy'
      }
    ]
  'storage-modifiers':
    'captures':
      '1':
        'name': 'storage.modifier.groovy'
    'match': '\\b(public|private|protected|static|final|native|synchronized|abstract|threadsafe|transient)\\b'
  'strings':
    'patterns': [
      {
        'begin': '"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.groovy'
        'end': '"'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.groovy'
        'name': 'string.quoted.double.groovy'
        'patterns': [
          {
            'match': '\\\\.'
            'name': 'constant.character.escape.groovy'
          }
        ]
      }
      {
        'begin': '\''
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.groovy'
        'end': '\''
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.groovy'
        'name': 'string.quoted.single.groovy'
        'patterns': [
          {
            'match': '\\\\.'
            'name': 'constant.character.escape.groovy'
          }
        ]
      }
    ]
  'throws':
    'begin': 'throws'
    'beginCaptures':
      '0':
        'name': 'storage.modifier.groovy'
    'end': '(?={|;)'
    'name': 'meta.throwables.groovy'
    'patterns': [
      {
        'include': '#object-types'
      }
    ]
  'values':
    'patterns': [
      {
        'include': '#strings'
      }
      {
        'include': '#object-types'
      }
      {
        'include': '#constants-and-special-vars'
      }
    ]
  'variables':
    'applyEndPatternLast': 1
    'patterns': [
      {
        'begin': '(?x:(?=\n                        (?:\n                            (?:private|protected|public|native|synchronized|abstract|threadsafe|transient|static|final) # visibility/modifier\n                                |\n                            (?:def)\n                                |\n                            (?:void|boolean|byte|char|short|int|float|long|double)\n                                |\n                            (?:(?:[a-z]\\w*\\.)*[A-Z]+\\w*) # object type\n                        )\n                        \\s+\n                        (?!private|protected|public|native|synchronized|abstract|threadsafe|transient|static|final|def|void|boolean|byte|char|short|int|float|long|double)\n                        [\\w\\d_<>\\[\\],\\?][\\w\\d_<>\\[\\],\\? \\t]*\n                        (?:=|$)\n                        \n\t\t\t\t\t))'
        'end': '(?=;)'
        'name': 'meta.definition.variable.groovy'
        'patterns': [
          {
            'match': '\\s'
          }
          {
            'captures':
              '1':
                'name': 'constant.variable.groovy'
            'match': '([A-Z_0-9]+)\\s+(?=\\=)'
          }
          {
            'captures':
              '1':
                'name': 'meta.definition.variable.name.groovy'
            'match': '(\\w[^\\s,]*)\\s+(?=\\=)'
          }
          {
            'begin': '='
            'beginCaptures':
              '0':
                'name': 'keyword.operator.assignment.groovy'
            'end': '(?=;)'
            'patterns': [
              {
                'include': '#code'
              }
            ]
          }
          {
            'captures':
              '1':
                'name': 'meta.definition.variable.name.groovy'
            'match': '(\\w[^\\s=]*)(?=\\s*;)'
          }
          {
            'include': '#code'
          }
        ]
      }
    ]
